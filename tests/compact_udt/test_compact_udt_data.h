#ifndef _TESTS_COMPACT_UDT_TESTDATA_H_
#define _TESTS_COMPACT_UDT_TESTDATA_H_

#include "compact_udt_virtual_data.h"

namespace TestData {
CBuffer privkey_00 = {
    0x34, 0xF8, 0xD6, 0x66, 0x9A, 0x4E, 0x5D, 0x7C, 0x85, 0x8D, 0x6C,
    0xD4, 0x11, 0x85, 0x67, 0x93, 0x40, 0x6E, 0x69, 0xED, 0x96, 0x61,
    0xF8, 0xCF, 0xDA, 0x5E, 0xD7, 0xCE, 0xAB, 0x2B, 0x9C, 0x12,
};
CBuffer pubkey_00 = {
    0x00, 0x02, 0xE9, 0x72, 0xC5, 0x65, 0x95, 0x0F, 0xE3, 0xE2, 0xA4,
    0x8E, 0x4C, 0x12, 0x7A, 0x44, 0x4C, 0xE2, 0x5B, 0xEE, 0x30, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
CBuffer privkey_01 = {
    0xCB, 0xBD, 0x8C, 0xEA, 0x61, 0xA0, 0xE6, 0xD9, 0x30, 0xF1, 0xB7,
    0x0B, 0xDF, 0x19, 0x89, 0x46, 0x7F, 0x73, 0xF6, 0x00, 0xBA, 0x04,
    0x51, 0x45, 0x01, 0x50, 0xEC, 0xCA, 0xCC, 0x22, 0x64, 0x56,
};
CBuffer pubkey_01 = {
    0x00, 0xCE, 0x8F, 0x28, 0x58, 0xFA, 0xCC, 0xFF, 0x8B, 0x22, 0x39,
    0x62, 0x89, 0x37, 0x08, 0x3F, 0x12, 0x84, 0x47, 0x9A, 0xF7, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
CBuffer privkey_02 = {
    0xD2, 0x83, 0xA5, 0xAB, 0x18, 0xEB, 0xA5, 0x40, 0x15, 0x43, 0x22,
    0x1D, 0x52, 0xBF, 0xA3, 0xDA, 0xDF, 0x75, 0x76, 0xAA, 0x87, 0x0C,
    0xAC, 0x4C, 0x36, 0x0A, 0x36, 0x88, 0x42, 0xDC, 0xC1, 0xF2,
};
CBuffer pubkey_02 = {
    0x00, 0x25, 0x50, 0x34, 0x77, 0x25, 0xFB, 0x92, 0xF7, 0x30, 0x36,
    0xAC, 0x5F, 0x35, 0x7A, 0xBB, 0x89, 0x2E, 0xF5, 0x31, 0xA4, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
CBuffer privkey_03 = {
    0x40, 0x4C, 0x4B, 0xCB, 0x66, 0x7C, 0x5F, 0xD7, 0xDF, 0x0C, 0x6B,
    0x64, 0x55, 0x52, 0x7A, 0xD8, 0xB1, 0x2D, 0xC0, 0xDB, 0x3C, 0x03,
    0xEB, 0x7F, 0x75, 0xF2, 0x99, 0x3F, 0x55, 0xBC, 0x4B, 0x2F,
};
CBuffer pubkey_03 = {
    0x00, 0xDB, 0x14, 0x86, 0x31, 0x98, 0x5F, 0x6D, 0x20, 0xC2, 0xF1,
    0xDA, 0x70, 0x97, 0xF1, 0x8D, 0x1A, 0x06, 0xF6, 0x1A, 0x5E, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
CBuffer privkey_04 = {
    0x0F, 0x17, 0x35, 0x29, 0x36, 0xF1, 0x07, 0xDB, 0x7E, 0x16, 0xCE,
    0x58, 0x2D, 0xB4, 0xED, 0x7A, 0x4A, 0x85, 0x6D, 0x54, 0x69, 0x8E,
    0x9A, 0xC0, 0xBB, 0x90, 0x00, 0xC3, 0x63, 0x70, 0xB3, 0xB8,
};
CBuffer pubkey_04 = {
    0x00, 0x76, 0x8A, 0x20, 0x3D, 0x0C, 0x13, 0xB8, 0x5F, 0x03, 0x72,
    0x68, 0xA4, 0x87, 0x0A, 0xF4, 0xDA, 0x8A, 0x1A, 0x51, 0xA8, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
CBuffer privkey_05 = {
    0x13, 0xC2, 0xF3, 0x18, 0x83, 0xEF, 0x5E, 0x21, 0xCA, 0xAB, 0xB1,
    0x51, 0x7B, 0x52, 0x36, 0x47, 0xE6, 0x5C, 0xFC, 0x1A, 0xDD, 0x84,
    0x95, 0xD9, 0x0A, 0x1C, 0x2D, 0xB2, 0x1E, 0xD5, 0xD4, 0x41,
};
CBuffer pubkey_05 = {
    0x00, 0xA4, 0xE4, 0x1E, 0x17, 0xD3, 0x77, 0xE9, 0xB0, 0x60, 0x10,
    0x16, 0xF3, 0x4B, 0xF4, 0xA1, 0x9E, 0xEC, 0x82, 0x37, 0x0D, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
CBuffer privkey_06 = {
    0x08, 0xEC, 0x08, 0xA4, 0xF2, 0xFD, 0x95, 0xF4, 0xD1, 0xB1, 0x0D,
    0x8D, 0x1A, 0x9F, 0xF0, 0xE1, 0x9F, 0xA2, 0x94, 0xDD, 0xA3, 0xA7,
    0xFB, 0x8E, 0x3A, 0xBC, 0x92, 0x24, 0x44, 0x0C, 0x2D, 0x44,
};
CBuffer pubkey_06 = {
    0x00, 0xAF, 0x1C, 0xAB, 0x76, 0xAE, 0xB3, 0xBE, 0x49, 0xB5, 0xAE,
    0x21, 0xD7, 0x52, 0x0E, 0x5D, 0x76, 0x47, 0x1F, 0xFB, 0x53, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

VDUsers users_00 = {
    VDUser(pubkey_00, privkey_00, 10),
    VDUser(pubkey_01, privkey_01, 100),
    VDUser(pubkey_02, privkey_02, 500),
    VDUser(pubkey_03, privkey_03, 10),
};
CBuffer proof_00 = {
    0x4C, 0x4F, 0xA6, 0x4C, 0x4F, 0xA6, 0x48, 0x4C, 0x4F,
    0xA6, 0x4C, 0x4F, 0xA6, 0x48, 0x48, 0x4F, 0x58,
};
CBuffer input_type_id_00 = {
    0x49, 0x6E, 0x6F, 0xF2, 0xAB, 0xDA, 0x24, 0x89, 0x59, 0xBA, 0x4A,
    0x1E, 0x05, 0x73, 0xBC, 0x54, 0x16, 0x01, 0x39, 0x80, 0xE6, 0xDA,
    0x26, 0xF4, 0xC1, 0x45, 0x25, 0x32, 0xA2, 0xEA, 0xA3, 0x72,
};
CBuffer output_type_id_00 = {
    0xCF, 0xB6, 0x8F, 0x91, 0x8B, 0xC7, 0xD6, 0xF1, 0x4F, 0x3F, 0x29,
    0x4C, 0xAB, 0xCE, 0xDA, 0x0A, 0x51, 0x70, 0xEE, 0xF3, 0xBA, 0x29,
    0x9D, 0x11, 0x9F, 0xA1, 0x33, 0x63, 0x54, 0x55, 0x61, 0x11,
};
GenerateTransaction::AddCellArgs args_00 = {
    10000, users_00, proof_00, true, true, input_type_id_00, output_type_id_00};

VDUsers users_01 = {
    VDUser(pubkey_00, privkey_00, 100),
    VDUser(pubkey_02, privkey_02, 1000),
    VDUser(pubkey_04, privkey_04, 50),
    VDUser(pubkey_05, privkey_05, 300),
};
CBuffer proof_01 = {
    0x4C, 0x4F, 0xA5, 0x4C, 0x4F, 0xA5, 0x48, 0x4F, 0x01, 0x4C, 0x4F,
    0xA3, 0x4C, 0x4F, 0xA3, 0x48, 0x4F, 0x03, 0x48, 0x4F, 0x58,
};
CBuffer input_type_id_01 = {
    0xBD, 0xE3, 0xDB, 0xB6, 0x2E, 0x87, 0x8A, 0x34, 0x09, 0x10, 0x9F,
    0xAE, 0xA9, 0x29, 0x0B, 0x6C, 0x03, 0x60, 0xF4, 0x06, 0xBA, 0x61,
    0xDE, 0x0C, 0xFA, 0x3E, 0x73, 0xFD, 0x5D, 0x02, 0x71, 0x73,
};
CBuffer output_type_id_01 = {
    0x50, 0xBC, 0x97, 0x24, 0xF0, 0x32, 0x9C, 0xD2, 0x99, 0x0F, 0x65,
    0xAE, 0x34, 0xC4, 0xAA, 0x4A, 0xB0, 0x71, 0x59, 0x0A, 0x18, 0x16,
    0xAD, 0x70, 0x2A, 0x7A, 0x43, 0x87, 0xEE, 0x29, 0x21, 0x8B,
};
GenerateTransaction::AddCellArgs args_01 = {
    50000, users_01,         proof_01,         true,
    false, input_type_id_01, output_type_id_01};

VDUsers users_02 = {
    VDUser(pubkey_02, privkey_02, 100),
    VDUser(pubkey_04, privkey_04, 1100),
    VDUser(pubkey_06, privkey_06, 5000),
};
CBuffer proof_02 = {
    0x4C, 0x4F, 0xA7, 0x4C, 0x4F, 0xA3, 0x4C, 0x4F,
    0xA3, 0x48, 0x4F, 0x03, 0x48, 0x4F, 0x58,
};
CBuffer input_type_id_02 = {
    0x64, 0xF9, 0xF3, 0x4D, 0x1C, 0xE1, 0x49, 0xCC, 0x22, 0x93, 0x41,
    0xAF, 0x08, 0xB1, 0x9B, 0x20, 0xF0, 0x93, 0x8E, 0x51, 0x15, 0x37,
    0x4A, 0xC5, 0xC1, 0x1D, 0x57, 0x53, 0xDA, 0xCA, 0xAB, 0xE2,
};
CBuffer output_type_id_02 = {
    0xA0, 0xF7, 0x56, 0x89, 0xE8, 0x2B, 0x59, 0x8C, 0xF7, 0xB3, 0x3B,
    0x90, 0x95, 0x48, 0x56, 0x22, 0x24, 0xC0, 0x44, 0x69, 0x14, 0x70,
    0x57, 0x04, 0x2E, 0xF6, 0xD2, 0xFB, 0xBD, 0xA2, 0x04, 0x2F,
};
GenerateTransaction::AddCellArgs args_02 = {
    50000, users_02,         proof_02,         false,
    false, input_type_id_02, output_type_id_02};

VDUsers users_03 = {
    VDUser(pubkey_03, privkey_03, 300),
    VDUser(pubkey_04, privkey_04, 2000),
    VDUser(pubkey_05, privkey_05, 100),
    VDUser(pubkey_06, privkey_06, 1000),
};
CBuffer proof_03 = {
    0x4C, 0x4F, 0xA6, 0x4C, 0x4F, 0xA3, 0x4C, 0x4F, 0xA3, 0x48,
    0x4F, 0x02, 0x48, 0x4C, 0x4F, 0xA7, 0x48, 0x4F, 0x58,
};
CBuffer input_type_id_03 = {
    0x5A, 0x3A, 0x6D, 0xA0, 0x8A, 0xEE, 0xCE, 0x7A, 0x70, 0x81, 0x30,
    0x51, 0xC5, 0x73, 0x27, 0x58, 0x49, 0xC4, 0xF4, 0x70, 0x08, 0x42,
    0x17, 0xBB, 0xD2, 0x20, 0x7E, 0x55, 0xEF, 0x09, 0xBA, 0x72,
};
CBuffer output_type_id_03 = {
    0xA0, 0x45, 0xD2, 0x01, 0x19, 0xD7, 0xDD, 0x00, 0xCB, 0x31, 0x02,
    0xE9, 0x8B, 0xE4, 0xA9, 0x93, 0xDC, 0x13, 0xC0, 0xD4, 0xF5, 0xB6,
    0x9E, 0xFD, 0x35, 0xE9, 0xD1, 0xF0, 0xF2, 0x1D, 0x34, 0xE6,
};
GenerateTransaction::AddCellArgs args_03 = {
    12220, users_03,         proof_03,         true,
    false, input_type_id_03, output_type_id_03};
}  // namespace TestData

inline void gen_test_data(GenerateTransaction* tx) {
  int cell_00 = tx->add_cell(TestData::args_00);
  int cell_01 = tx->add_cell(TestData::args_01);
  int cell_02 = tx->add_cell(TestData::args_02);
  int cell_03 = tx->add_cell(TestData::args_03);
  tx->add_transfer(cell_00, TestData::pubkey_00, cell_01, TestData::pubkey_02,
                   50, 1);
  tx->add_transfer(cell_00, TestData::pubkey_02, cell_00, TestData::pubkey_00,
                   300, 1);
  tx->add_transfer(cell_01, TestData::pubkey_02, cell_02, TestData::pubkey_06,
                   100, 10);
  tx->add_transfer(cell_01, TestData::pubkey_00, cell_01, TestData::pubkey_02,
                   10, 10);
  tx->add_transfer(cell_02, TestData::pubkey_04, cell_00, TestData::pubkey_00,
                   1000, 10);
  tx->add_transfer(cell_00, TestData::pubkey_00, cell_02, TestData::pubkey_06,
                   20, 30);
  tx->add_transfer(cell_01, TestData::pubkey_02, cell_03, TestData::pubkey_05,
                   99, 30);
}

#endif  // _TESTS_COMPACT_UDT_TESTDATA_H_