// Generated by Molecule 0.7.0

#define MOLECULEC_VERSION 7000
#define MOLECULE_API_VERSION_MIN 7000

#include "molecule_reader.h"
#include "molecule_builder.h"

#ifndef COMPACT_UDT_H
#define COMPACT_UDT_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef MOLECULE_API_DECORATOR
#define __DEFINE_MOLECULE_API_DECORATOR_COMPACT_UDT
#define MOLECULE_API_DECORATOR
#endif /* MOLECULE_API_DECORATOR */

#include "blockchain.h"

/*
 * Reader APIs
 */

#define                                 MolReader_Signature_verify(s, c)                mol_fixvec_verify(s, 1)
#define                                 MolReader_Signature_length(s)                   mol_fixvec_length(s)
#define                                 MolReader_Signature_get(s, i)                   mol_fixvec_slice_by_index(s, 1, i)
#define                                 MolReader_Signature_raw_bytes(s)                mol_fixvec_slice_raw_bytes(s)
MOLECULE_API_DECORATOR  mol_errno       MolReader_SignatureOpt_verify                   (const mol_seg_t*, bool);
#define                                 MolReader_SignatureOpt_is_none(s)               mol_option_is_none(s)
#define                                 MolReader_ScriptHash_verify(s, c)               mol_verify_fixed_size(s, 32)
#define                                 MolReader_ScriptHash_get_nth0(s)                mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_ScriptHash_get_nth1(s)                mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_ScriptHash_get_nth2(s)                mol_slice_by_offset(s, 2, 1)
#define                                 MolReader_ScriptHash_get_nth3(s)                mol_slice_by_offset(s, 3, 1)
#define                                 MolReader_ScriptHash_get_nth4(s)                mol_slice_by_offset(s, 4, 1)
#define                                 MolReader_ScriptHash_get_nth5(s)                mol_slice_by_offset(s, 5, 1)
#define                                 MolReader_ScriptHash_get_nth6(s)                mol_slice_by_offset(s, 6, 1)
#define                                 MolReader_ScriptHash_get_nth7(s)                mol_slice_by_offset(s, 7, 1)
#define                                 MolReader_ScriptHash_get_nth8(s)                mol_slice_by_offset(s, 8, 1)
#define                                 MolReader_ScriptHash_get_nth9(s)                mol_slice_by_offset(s, 9, 1)
#define                                 MolReader_ScriptHash_get_nth10(s)               mol_slice_by_offset(s, 10, 1)
#define                                 MolReader_ScriptHash_get_nth11(s)               mol_slice_by_offset(s, 11, 1)
#define                                 MolReader_ScriptHash_get_nth12(s)               mol_slice_by_offset(s, 12, 1)
#define                                 MolReader_ScriptHash_get_nth13(s)               mol_slice_by_offset(s, 13, 1)
#define                                 MolReader_ScriptHash_get_nth14(s)               mol_slice_by_offset(s, 14, 1)
#define                                 MolReader_ScriptHash_get_nth15(s)               mol_slice_by_offset(s, 15, 1)
#define                                 MolReader_ScriptHash_get_nth16(s)               mol_slice_by_offset(s, 16, 1)
#define                                 MolReader_ScriptHash_get_nth17(s)               mol_slice_by_offset(s, 17, 1)
#define                                 MolReader_ScriptHash_get_nth18(s)               mol_slice_by_offset(s, 18, 1)
#define                                 MolReader_ScriptHash_get_nth19(s)               mol_slice_by_offset(s, 19, 1)
#define                                 MolReader_ScriptHash_get_nth20(s)               mol_slice_by_offset(s, 20, 1)
#define                                 MolReader_ScriptHash_get_nth21(s)               mol_slice_by_offset(s, 21, 1)
#define                                 MolReader_ScriptHash_get_nth22(s)               mol_slice_by_offset(s, 22, 1)
#define                                 MolReader_ScriptHash_get_nth23(s)               mol_slice_by_offset(s, 23, 1)
#define                                 MolReader_ScriptHash_get_nth24(s)               mol_slice_by_offset(s, 24, 1)
#define                                 MolReader_ScriptHash_get_nth25(s)               mol_slice_by_offset(s, 25, 1)
#define                                 MolReader_ScriptHash_get_nth26(s)               mol_slice_by_offset(s, 26, 1)
#define                                 MolReader_ScriptHash_get_nth27(s)               mol_slice_by_offset(s, 27, 1)
#define                                 MolReader_ScriptHash_get_nth28(s)               mol_slice_by_offset(s, 28, 1)
#define                                 MolReader_ScriptHash_get_nth29(s)               mol_slice_by_offset(s, 29, 1)
#define                                 MolReader_ScriptHash_get_nth30(s)               mol_slice_by_offset(s, 30, 1)
#define                                 MolReader_ScriptHash_get_nth31(s)               mol_slice_by_offset(s, 31, 1)
#define                                 MolReader_Identity_verify(s, c)                 mol_verify_fixed_size(s, 21)
#define                                 MolReader_Identity_get_nth0(s)                  mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_Identity_get_nth1(s)                  mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_Identity_get_nth2(s)                  mol_slice_by_offset(s, 2, 1)
#define                                 MolReader_Identity_get_nth3(s)                  mol_slice_by_offset(s, 3, 1)
#define                                 MolReader_Identity_get_nth4(s)                  mol_slice_by_offset(s, 4, 1)
#define                                 MolReader_Identity_get_nth5(s)                  mol_slice_by_offset(s, 5, 1)
#define                                 MolReader_Identity_get_nth6(s)                  mol_slice_by_offset(s, 6, 1)
#define                                 MolReader_Identity_get_nth7(s)                  mol_slice_by_offset(s, 7, 1)
#define                                 MolReader_Identity_get_nth8(s)                  mol_slice_by_offset(s, 8, 1)
#define                                 MolReader_Identity_get_nth9(s)                  mol_slice_by_offset(s, 9, 1)
#define                                 MolReader_Identity_get_nth10(s)                 mol_slice_by_offset(s, 10, 1)
#define                                 MolReader_Identity_get_nth11(s)                 mol_slice_by_offset(s, 11, 1)
#define                                 MolReader_Identity_get_nth12(s)                 mol_slice_by_offset(s, 12, 1)
#define                                 MolReader_Identity_get_nth13(s)                 mol_slice_by_offset(s, 13, 1)
#define                                 MolReader_Identity_get_nth14(s)                 mol_slice_by_offset(s, 14, 1)
#define                                 MolReader_Identity_get_nth15(s)                 mol_slice_by_offset(s, 15, 1)
#define                                 MolReader_Identity_get_nth16(s)                 mol_slice_by_offset(s, 16, 1)
#define                                 MolReader_Identity_get_nth17(s)                 mol_slice_by_offset(s, 17, 1)
#define                                 MolReader_Identity_get_nth18(s)                 mol_slice_by_offset(s, 18, 1)
#define                                 MolReader_Identity_get_nth19(s)                 mol_slice_by_offset(s, 19, 1)
#define                                 MolReader_Identity_get_nth20(s)                 mol_slice_by_offset(s, 20, 1)
MOLECULE_API_DECORATOR  mol_errno       MolReader_Deposit_verify                        (const mol_seg_t*, bool);
#define                                 MolReader_Deposit_actual_field_count(s)         mol_table_actual_field_count(s)
#define                                 MolReader_Deposit_has_extra_fields(s)           mol_table_has_extra_fields(s, 4)
#define                                 MolReader_Deposit_get_source(s)                 mol_table_slice_by_index(s, 0)
#define                                 MolReader_Deposit_get_target(s)                 mol_table_slice_by_index(s, 1)
#define                                 MolReader_Deposit_get_amount(s)                 mol_table_slice_by_index(s, 2)
#define                                 MolReader_Deposit_get_fee(s)                    mol_table_slice_by_index(s, 3)
MOLECULE_API_DECORATOR  mol_errno       MolReader_DepositVec_verify                     (const mol_seg_t*, bool);
#define                                 MolReader_DepositVec_length(s)                  mol_dynvec_length(s)
#define                                 MolReader_DepositVec_get(s, i)                  mol_dynvec_slice_by_index(s, i)
MOLECULE_API_DECORATOR  mol_errno       MolReader_MoveBetweenCompactSMT_verify          (const mol_seg_t*, bool);
#define                                 MolReader_MoveBetweenCompactSMT_actual_field_count(s) mol_table_actual_field_count(s)
#define                                 MolReader_MoveBetweenCompactSMT_has_extra_fields(s) mol_table_has_extra_fields(s, 2)
#define                                 MolReader_MoveBetweenCompactSMT_get_script_hash(s) mol_table_slice_by_index(s, 0)
#define                                 MolReader_MoveBetweenCompactSMT_get_identity(s) mol_table_slice_by_index(s, 1)
MOLECULE_API_DECORATOR  mol_errno       MolReader_TransferTarget_verify                 (const mol_seg_t*, bool);
#define                                 MolReader_TransferTarget_unpack(s)              mol_union_unpack(s)
MOLECULE_API_DECORATOR  mol_errno       MolReader_RawTransfer_verify                    (const mol_seg_t*, bool);
#define                                 MolReader_RawTransfer_actual_field_count(s)     mol_table_actual_field_count(s)
#define                                 MolReader_RawTransfer_has_extra_fields(s)       mol_table_has_extra_fields(s, 4)
#define                                 MolReader_RawTransfer_get_source(s)             mol_table_slice_by_index(s, 0)
#define                                 MolReader_RawTransfer_get_target(s)             mol_table_slice_by_index(s, 1)
#define                                 MolReader_RawTransfer_get_amount(s)             mol_table_slice_by_index(s, 2)
#define                                 MolReader_RawTransfer_get_fee(s)                mol_table_slice_by_index(s, 3)
MOLECULE_API_DECORATOR  mol_errno       MolReader_Transfer_verify                       (const mol_seg_t*, bool);
#define                                 MolReader_Transfer_actual_field_count(s)        mol_table_actual_field_count(s)
#define                                 MolReader_Transfer_has_extra_fields(s)          mol_table_has_extra_fields(s, 2)
#define                                 MolReader_Transfer_get_raw(s)                   mol_table_slice_by_index(s, 0)
#define                                 MolReader_Transfer_get_signature(s)             mol_table_slice_by_index(s, 1)
MOLECULE_API_DECORATOR  mol_errno       MolReader_TransferVec_verify                    (const mol_seg_t*, bool);
#define                                 MolReader_TransferVec_length(s)                 mol_dynvec_length(s)
#define                                 MolReader_TransferVec_get(s, i)                 mol_dynvec_slice_by_index(s, i)
#define                                 MolReader_KVPair_verify(s, c)                   mol_verify_fixed_size(s, 64)
#define                                 MolReader_KVPair_get_k(s)                       mol_slice_by_offset(s, 0, 32)
#define                                 MolReader_KVPair_get_v(s)                       mol_slice_by_offset(s, 32, 32)
#define                                 MolReader_KVPairVec_verify(s, c)                mol_fixvec_verify(s, 64)
#define                                 MolReader_KVPairVec_length(s)                   mol_fixvec_length(s)
#define                                 MolReader_KVPairVec_get(s, i)                   mol_fixvec_slice_by_index(s, 64, i)
MOLECULE_API_DECORATOR  mol_errno       MolReader_CompactUDTEntries_verify              (const mol_seg_t*, bool);
#define                                 MolReader_CompactUDTEntries_actual_field_count(s) mol_table_actual_field_count(s)
#define                                 MolReader_CompactUDTEntries_has_extra_fields(s) mol_table_has_extra_fields(s, 5)
#define                                 MolReader_CompactUDTEntries_get_deposits(s)     mol_table_slice_by_index(s, 0)
#define                                 MolReader_CompactUDTEntries_get_transfers(s)    mol_table_slice_by_index(s, 1)
#define                                 MolReader_CompactUDTEntries_get_kv_state(s)     mol_table_slice_by_index(s, 2)
#define                                 MolReader_CompactUDTEntries_get_kv_proof(s)     mol_table_slice_by_index(s, 3)
#define                                 MolReader_CompactUDTEntries_get_signature(s)    mol_table_slice_by_index(s, 4)

/*
 * Builder APIs
 */

#define                                 MolBuilder_Signature_init(b)                    mol_fixvec_builder_initialize(b, 16)
#define                                 MolBuilder_Signature_push(b, p)                 mol_fixvec_builder_push_byte(b, p)
#define                                 MolBuilder_Signature_build(b)                   mol_fixvec_builder_finalize(b)
#define                                 MolBuilder_Signature_clear(b)                   mol_builder_discard(b)
#define                                 MolBuilder_SignatureOpt_init(b)                 mol_builder_initialize_fixed_size(b, 0)
#define                                 MolBuilder_SignatureOpt_set(b, p, l)            mol_option_builder_set(b, p, l)
#define                                 MolBuilder_SignatureOpt_build(b)                mol_builder_finalize_simple(b)
#define                                 MolBuilder_SignatureOpt_clear(b)                mol_builder_discard(b)
#define                                 MolBuilder_ScriptHash_init(b)                   mol_builder_initialize_fixed_size(b, 32)
#define                                 MolBuilder_ScriptHash_set_nth0(b, p)            mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_ScriptHash_set_nth1(b, p)            mol_builder_set_byte_by_offset(b, 1, p)
#define                                 MolBuilder_ScriptHash_set_nth2(b, p)            mol_builder_set_byte_by_offset(b, 2, p)
#define                                 MolBuilder_ScriptHash_set_nth3(b, p)            mol_builder_set_byte_by_offset(b, 3, p)
#define                                 MolBuilder_ScriptHash_set_nth4(b, p)            mol_builder_set_byte_by_offset(b, 4, p)
#define                                 MolBuilder_ScriptHash_set_nth5(b, p)            mol_builder_set_byte_by_offset(b, 5, p)
#define                                 MolBuilder_ScriptHash_set_nth6(b, p)            mol_builder_set_byte_by_offset(b, 6, p)
#define                                 MolBuilder_ScriptHash_set_nth7(b, p)            mol_builder_set_byte_by_offset(b, 7, p)
#define                                 MolBuilder_ScriptHash_set_nth8(b, p)            mol_builder_set_byte_by_offset(b, 8, p)
#define                                 MolBuilder_ScriptHash_set_nth9(b, p)            mol_builder_set_byte_by_offset(b, 9, p)
#define                                 MolBuilder_ScriptHash_set_nth10(b, p)           mol_builder_set_byte_by_offset(b, 10, p)
#define                                 MolBuilder_ScriptHash_set_nth11(b, p)           mol_builder_set_byte_by_offset(b, 11, p)
#define                                 MolBuilder_ScriptHash_set_nth12(b, p)           mol_builder_set_byte_by_offset(b, 12, p)
#define                                 MolBuilder_ScriptHash_set_nth13(b, p)           mol_builder_set_byte_by_offset(b, 13, p)
#define                                 MolBuilder_ScriptHash_set_nth14(b, p)           mol_builder_set_byte_by_offset(b, 14, p)
#define                                 MolBuilder_ScriptHash_set_nth15(b, p)           mol_builder_set_byte_by_offset(b, 15, p)
#define                                 MolBuilder_ScriptHash_set_nth16(b, p)           mol_builder_set_byte_by_offset(b, 16, p)
#define                                 MolBuilder_ScriptHash_set_nth17(b, p)           mol_builder_set_byte_by_offset(b, 17, p)
#define                                 MolBuilder_ScriptHash_set_nth18(b, p)           mol_builder_set_byte_by_offset(b, 18, p)
#define                                 MolBuilder_ScriptHash_set_nth19(b, p)           mol_builder_set_byte_by_offset(b, 19, p)
#define                                 MolBuilder_ScriptHash_set_nth20(b, p)           mol_builder_set_byte_by_offset(b, 20, p)
#define                                 MolBuilder_ScriptHash_set_nth21(b, p)           mol_builder_set_byte_by_offset(b, 21, p)
#define                                 MolBuilder_ScriptHash_set_nth22(b, p)           mol_builder_set_byte_by_offset(b, 22, p)
#define                                 MolBuilder_ScriptHash_set_nth23(b, p)           mol_builder_set_byte_by_offset(b, 23, p)
#define                                 MolBuilder_ScriptHash_set_nth24(b, p)           mol_builder_set_byte_by_offset(b, 24, p)
#define                                 MolBuilder_ScriptHash_set_nth25(b, p)           mol_builder_set_byte_by_offset(b, 25, p)
#define                                 MolBuilder_ScriptHash_set_nth26(b, p)           mol_builder_set_byte_by_offset(b, 26, p)
#define                                 MolBuilder_ScriptHash_set_nth27(b, p)           mol_builder_set_byte_by_offset(b, 27, p)
#define                                 MolBuilder_ScriptHash_set_nth28(b, p)           mol_builder_set_byte_by_offset(b, 28, p)
#define                                 MolBuilder_ScriptHash_set_nth29(b, p)           mol_builder_set_byte_by_offset(b, 29, p)
#define                                 MolBuilder_ScriptHash_set_nth30(b, p)           mol_builder_set_byte_by_offset(b, 30, p)
#define                                 MolBuilder_ScriptHash_set_nth31(b, p)           mol_builder_set_byte_by_offset(b, 31, p)
#define                                 MolBuilder_ScriptHash_build(b)                  mol_builder_finalize_simple(b)
#define                                 MolBuilder_ScriptHash_clear(b)                  mol_builder_discard(b)
#define                                 MolBuilder_Identity_init(b)                     mol_builder_initialize_fixed_size(b, 21)
#define                                 MolBuilder_Identity_set_nth0(b, p)              mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_Identity_set_nth1(b, p)              mol_builder_set_byte_by_offset(b, 1, p)
#define                                 MolBuilder_Identity_set_nth2(b, p)              mol_builder_set_byte_by_offset(b, 2, p)
#define                                 MolBuilder_Identity_set_nth3(b, p)              mol_builder_set_byte_by_offset(b, 3, p)
#define                                 MolBuilder_Identity_set_nth4(b, p)              mol_builder_set_byte_by_offset(b, 4, p)
#define                                 MolBuilder_Identity_set_nth5(b, p)              mol_builder_set_byte_by_offset(b, 5, p)
#define                                 MolBuilder_Identity_set_nth6(b, p)              mol_builder_set_byte_by_offset(b, 6, p)
#define                                 MolBuilder_Identity_set_nth7(b, p)              mol_builder_set_byte_by_offset(b, 7, p)
#define                                 MolBuilder_Identity_set_nth8(b, p)              mol_builder_set_byte_by_offset(b, 8, p)
#define                                 MolBuilder_Identity_set_nth9(b, p)              mol_builder_set_byte_by_offset(b, 9, p)
#define                                 MolBuilder_Identity_set_nth10(b, p)             mol_builder_set_byte_by_offset(b, 10, p)
#define                                 MolBuilder_Identity_set_nth11(b, p)             mol_builder_set_byte_by_offset(b, 11, p)
#define                                 MolBuilder_Identity_set_nth12(b, p)             mol_builder_set_byte_by_offset(b, 12, p)
#define                                 MolBuilder_Identity_set_nth13(b, p)             mol_builder_set_byte_by_offset(b, 13, p)
#define                                 MolBuilder_Identity_set_nth14(b, p)             mol_builder_set_byte_by_offset(b, 14, p)
#define                                 MolBuilder_Identity_set_nth15(b, p)             mol_builder_set_byte_by_offset(b, 15, p)
#define                                 MolBuilder_Identity_set_nth16(b, p)             mol_builder_set_byte_by_offset(b, 16, p)
#define                                 MolBuilder_Identity_set_nth17(b, p)             mol_builder_set_byte_by_offset(b, 17, p)
#define                                 MolBuilder_Identity_set_nth18(b, p)             mol_builder_set_byte_by_offset(b, 18, p)
#define                                 MolBuilder_Identity_set_nth19(b, p)             mol_builder_set_byte_by_offset(b, 19, p)
#define                                 MolBuilder_Identity_set_nth20(b, p)             mol_builder_set_byte_by_offset(b, 20, p)
#define                                 MolBuilder_Identity_build(b)                    mol_builder_finalize_simple(b)
#define                                 MolBuilder_Identity_clear(b)                    mol_builder_discard(b)
#define                                 MolBuilder_Deposit_init(b)                      mol_table_builder_initialize(b, 512, 4)
#define                                 MolBuilder_Deposit_set_source(b, p, l)          mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_Deposit_set_target(b, p, l)          mol_table_builder_add(b, 1, p, l)
#define                                 MolBuilder_Deposit_set_amount(b, p, l)          mol_table_builder_add(b, 2, p, l)
#define                                 MolBuilder_Deposit_set_fee(b, p, l)             mol_table_builder_add(b, 3, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_Deposit_build                        (mol_builder_t);
#define                                 MolBuilder_Deposit_clear(b)                     mol_builder_discard(b)
#define                                 MolBuilder_DepositVec_init(b)                   mol_builder_initialize_with_capacity(b, 2048, 64)
#define                                 MolBuilder_DepositVec_push(b, p, l)             mol_dynvec_builder_push(b, p, l)
#define                                 MolBuilder_DepositVec_build(b)                  mol_dynvec_builder_finalize(b)
#define                                 MolBuilder_DepositVec_clear(b)                  mol_builder_discard(b)
#define                                 MolBuilder_MoveBetweenCompactSMT_init(b)        mol_table_builder_initialize(b, 512, 2)
#define                                 MolBuilder_MoveBetweenCompactSMT_set_script_hash(b, p, l) mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_MoveBetweenCompactSMT_set_identity(b, p, l) mol_table_builder_add(b, 1, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_MoveBetweenCompactSMT_build          (mol_builder_t);
#define                                 MolBuilder_MoveBetweenCompactSMT_clear(b)       mol_builder_discard(b)
#define                                 MolBuilder_TransferTarget_init(b)               mol_union_builder_initialize(b, 64, 0, MolDefault_ScriptHash, 32)
#define                                 MolBuilder_TransferTarget_set_ScriptHash(b, p, l) mol_union_builder_set(b, 0, p, l)
#define                                 MolBuilder_TransferTarget_set_Identity(b, p, l) mol_union_builder_set(b, 1, p, l)
#define                                 MolBuilder_TransferTarget_set_MoveBetweenCompactSMT(b, p, l) mol_union_builder_set(b, 2, p, l)
#define                                 MolBuilder_TransferTarget_build(b)              mol_builder_finalize_simple(b)
#define                                 MolBuilder_TransferTarget_clear(b)              mol_builder_discard(b)
#define                                 MolBuilder_RawTransfer_init(b)                  mol_table_builder_initialize(b, 512, 4)
#define                                 MolBuilder_RawTransfer_set_source(b, p, l)      mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_RawTransfer_set_target(b, p, l)      mol_table_builder_add(b, 1, p, l)
#define                                 MolBuilder_RawTransfer_set_amount(b, p, l)      mol_table_builder_add(b, 2, p, l)
#define                                 MolBuilder_RawTransfer_set_fee(b, p, l)         mol_table_builder_add(b, 3, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_RawTransfer_build                    (mol_builder_t);
#define                                 MolBuilder_RawTransfer_clear(b)                 mol_builder_discard(b)
#define                                 MolBuilder_Transfer_init(b)                     mol_table_builder_initialize(b, 512, 2)
#define                                 MolBuilder_Transfer_set_raw(b, p, l)            mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_Transfer_set_signature(b, p, l)      mol_table_builder_add(b, 1, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_Transfer_build                       (mol_builder_t);
#define                                 MolBuilder_Transfer_clear(b)                    mol_builder_discard(b)
#define                                 MolBuilder_TransferVec_init(b)                  mol_builder_initialize_with_capacity(b, 2048, 64)
#define                                 MolBuilder_TransferVec_push(b, p, l)            mol_dynvec_builder_push(b, p, l)
#define                                 MolBuilder_TransferVec_build(b)                 mol_dynvec_builder_finalize(b)
#define                                 MolBuilder_TransferVec_clear(b)                 mol_builder_discard(b)
#define                                 MolBuilder_KVPair_init(b)                       mol_builder_initialize_fixed_size(b, 64)
#define                                 MolBuilder_KVPair_set_k(b, p)                   mol_builder_set_by_offset(b, 0, p, 32)
#define                                 MolBuilder_KVPair_set_v(b, p)                   mol_builder_set_by_offset(b, 32, p, 32)
#define                                 MolBuilder_KVPair_build(b)                      mol_builder_finalize_simple(b)
#define                                 MolBuilder_KVPair_clear(b)                      mol_builder_discard(b)
#define                                 MolBuilder_KVPairVec_init(b)                    mol_fixvec_builder_initialize(b, 1024)
#define                                 MolBuilder_KVPairVec_push(b, p)                 mol_fixvec_builder_push(b, p, 64)
#define                                 MolBuilder_KVPairVec_build(b)                   mol_fixvec_builder_finalize(b)
#define                                 MolBuilder_KVPairVec_clear(b)                   mol_builder_discard(b)
#define                                 MolBuilder_CompactUDTEntries_init(b)            mol_table_builder_initialize(b, 256, 5)
#define                                 MolBuilder_CompactUDTEntries_set_deposits(b, p, l) mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_CompactUDTEntries_set_transfers(b, p, l) mol_table_builder_add(b, 1, p, l)
#define                                 MolBuilder_CompactUDTEntries_set_kv_state(b, p, l) mol_table_builder_add(b, 2, p, l)
#define                                 MolBuilder_CompactUDTEntries_set_kv_proof(b, p, l) mol_table_builder_add(b, 3, p, l)
#define                                 MolBuilder_CompactUDTEntries_set_signature(b, p, l) mol_table_builder_add(b, 4, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_CompactUDTEntries_build              (mol_builder_t);
#define                                 MolBuilder_CompactUDTEntries_clear(b)           mol_builder_discard(b)

/*
 * Default Value
 */

#define ____ 0x00

MOLECULE_API_DECORATOR const uint8_t MolDefault_Signature[4]     =  {____, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_SignatureOpt[0]  =  {};
MOLECULE_API_DECORATOR const uint8_t MolDefault_ScriptHash[32]   =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Identity[21]     =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Deposit[105]     =  {
    0x69, ____, ____, ____, 0x14, ____, ____, ____, 0x34, ____, ____, ____,
    0x49, ____, ____, ____, 0x59, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_DepositVec[4]    =  {0x04, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_MoveBetweenCompactSMT[65] =  {
    0x41, ____, ____, ____, 0x0c, ____, ____, ____, 0x2c, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_TransferTarget[36] =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_RawTransfer[109] =  {
    0x6d, ____, ____, ____, 0x14, ____, ____, ____, 0x29, ____, ____, ____,
    0x4d, ____, ____, ____, 0x5d, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Transfer[125]    =  {
    0x7d, ____, ____, ____, 0x0c, ____, ____, ____, 0x79, ____, ____, ____,
    0x6d, ____, ____, ____, 0x14, ____, ____, ____, 0x29, ____, ____, ____,
    0x4d, ____, ____, ____, 0x5d, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_TransferVec[4]   =  {0x04, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_KVPair[64]       =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_KVPairVec[4]     =  {____, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_CompactUDTEntries[40] =  {
    0x28, ____, ____, ____, 0x18, ____, ____, ____, 0x1c, ____, ____, ____,
    0x20, ____, ____, ____, 0x24, ____, ____, ____, 0x28, ____, ____, ____,
    0x04, ____, ____, ____, 0x04, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____,
};

#undef ____

/*
 * Reader Functions
 */

MOLECULE_API_DECORATOR mol_errno MolReader_SignatureOpt_verify (const mol_seg_t *input, bool compatible) {
    if (input->size != 0) {
        return MolReader_Signature_verify(input, compatible);
    } else {
        return MOL_OK;
    }
}
MOLECULE_API_DECORATOR mol_errno MolReader_Deposit_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 4) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 4) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_ScriptHash_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_Identity_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[2];
        inner.size = offsets[3] - offsets[2];
        errno = MolReader_Uint128_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[3];
        inner.size = offsets[4] - offsets[3];
        errno = MolReader_Uint128_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno MolReader_DepositVec_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size == MOL_NUM_T_SIZE) {
        return MOL_OK;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t item_count = offset / 4 - 1;
    if (input->size < MOL_NUM_T_SIZE*(item_count+1)) {
        return MOL_ERR_HEADER;
    }
    mol_num_t end;
    for (mol_num_t i=1; i<item_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        end = mol_unpack_number(ptr);
        if (offset > end) {
            return MOL_ERR_OFFSET;
        }
        mol_seg_t inner;
        inner.ptr = input->ptr + offset;
        inner.size = end - offset;
        mol_errno errno = MolReader_Deposit_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        offset = end;
    }
    if (offset > total_size) {
        return MOL_ERR_OFFSET;
    }
    mol_seg_t inner;
    inner.ptr = input->ptr + offset;
    inner.size = total_size - offset;
    return MolReader_Deposit_verify(&inner, compatible);
}
MOLECULE_API_DECORATOR mol_errno MolReader_MoveBetweenCompactSMT_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 2) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 2) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_ScriptHash_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_Identity_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno MolReader_TransferTarget_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    mol_num_t item_id = mol_unpack_number(input->ptr);
    mol_seg_t inner;
    inner.ptr = input->ptr + MOL_NUM_T_SIZE;
    inner.size = input->size - MOL_NUM_T_SIZE;
    switch(item_id) {
        case 0:
            return MolReader_ScriptHash_verify(&inner, compatible);
        case 1:
            return MolReader_Identity_verify(&inner, compatible);
        case 2:
            return MolReader_MoveBetweenCompactSMT_verify(&inner, compatible);
        default:
            return MOL_ERR_UNKNOWN_ITEM;
    }
}
MOLECULE_API_DECORATOR mol_errno MolReader_RawTransfer_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 4) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 4) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_Identity_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_TransferTarget_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[2];
        inner.size = offsets[3] - offsets[2];
        errno = MolReader_Uint128_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[3];
        inner.size = offsets[4] - offsets[3];
        errno = MolReader_Uint128_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno MolReader_Transfer_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 2) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 2) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_RawTransfer_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_Signature_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno MolReader_TransferVec_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size == MOL_NUM_T_SIZE) {
        return MOL_OK;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t item_count = offset / 4 - 1;
    if (input->size < MOL_NUM_T_SIZE*(item_count+1)) {
        return MOL_ERR_HEADER;
    }
    mol_num_t end;
    for (mol_num_t i=1; i<item_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        end = mol_unpack_number(ptr);
        if (offset > end) {
            return MOL_ERR_OFFSET;
        }
        mol_seg_t inner;
        inner.ptr = input->ptr + offset;
        inner.size = end - offset;
        mol_errno errno = MolReader_Transfer_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        offset = end;
    }
    if (offset > total_size) {
        return MOL_ERR_OFFSET;
    }
    mol_seg_t inner;
    inner.ptr = input->ptr + offset;
    inner.size = total_size - offset;
    return MolReader_Transfer_verify(&inner, compatible);
}
MOLECULE_API_DECORATOR mol_errno MolReader_CompactUDTEntries_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 5) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 5) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_DepositVec_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_TransferVec_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[2];
        inner.size = offsets[3] - offsets[2];
        errno = MolReader_KVPairVec_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[3];
        inner.size = offsets[4] - offsets[3];
        errno = MolReader_Bytes_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[4];
        inner.size = offsets[5] - offsets[4];
        errno = MolReader_SignatureOpt_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}

/*
 * Builder Functions
 */

MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_Deposit_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 20;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 32 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 21 : len;
    len = builder.number_ptr[5];
    res.seg.size += len == 0 ? 16 : len;
    len = builder.number_ptr[7];
    res.seg.size += len == 0 ? 16 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 32 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 21 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[5];
    offset += len == 0 ? 16 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[7];
    offset += len == 0 ? 16 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 32;
        memcpy(dst, &MolDefault_ScriptHash, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 21;
        memcpy(dst, &MolDefault_Identity, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[5];
    if (len == 0) {
        len = 16;
        memcpy(dst, &MolDefault_Uint128, len);
    } else {
        mol_num_t of = builder.number_ptr[4];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[7];
    if (len == 0) {
        len = 16;
        memcpy(dst, &MolDefault_Uint128, len);
    } else {
        mol_num_t of = builder.number_ptr[6];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}
MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_MoveBetweenCompactSMT_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 12;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 32 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 21 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 32 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 21 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 32;
        memcpy(dst, &MolDefault_ScriptHash, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 21;
        memcpy(dst, &MolDefault_Identity, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}
MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_RawTransfer_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 20;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 21 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 36 : len;
    len = builder.number_ptr[5];
    res.seg.size += len == 0 ? 16 : len;
    len = builder.number_ptr[7];
    res.seg.size += len == 0 ? 16 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 21 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 36 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[5];
    offset += len == 0 ? 16 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[7];
    offset += len == 0 ? 16 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 21;
        memcpy(dst, &MolDefault_Identity, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 36;
        memcpy(dst, &MolDefault_TransferTarget, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[5];
    if (len == 0) {
        len = 16;
        memcpy(dst, &MolDefault_Uint128, len);
    } else {
        mol_num_t of = builder.number_ptr[4];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[7];
    if (len == 0) {
        len = 16;
        memcpy(dst, &MolDefault_Uint128, len);
    } else {
        mol_num_t of = builder.number_ptr[6];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}
MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_Transfer_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 12;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 109 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 4 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 109 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 4 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 109;
        memcpy(dst, &MolDefault_RawTransfer, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Signature, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}
MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_CompactUDTEntries_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 24;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[5];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[7];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[9];
    res.seg.size += len == 0 ? 0 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[5];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[7];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[9];
    offset += len == 0 ? 0 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_DepositVec, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_TransferVec, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[5];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_KVPairVec, len);
    } else {
        mol_num_t of = builder.number_ptr[4];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[7];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Bytes, len);
    } else {
        mol_num_t of = builder.number_ptr[6];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[9];
    if (len == 0) {
        len = 0;
        memcpy(dst, &MolDefault_SignatureOpt, len);
    } else {
        mol_num_t of = builder.number_ptr[8];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}

#ifdef __DEFINE_MOLECULE_API_DECORATOR_COMPACT_UDT
#undef MOLECULE_API_DECORATOR
#undef __DEFINE_MOLECULE_API_DECORATOR_COMPACT_UDT
#endif /* __DEFINE_MOLECULE_API_DECORATOR_COMPACT_UDT */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* COMPACT_UDT_H */
